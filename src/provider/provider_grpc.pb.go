// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/provider.proto

package provider

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	GetId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetDescription(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetIconName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	ReadAllTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Provider_ReadAllTasksClient, error)
	ReadTasksFromList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (Provider_ReadTasksFromListClient, error)
	ReadTaskIdsFromList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*TaskIdResponse, error)
	ReadTaskCountFromList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*CountResponse, error)
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskResponse, error)
	ReadTask(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*TaskResponse, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskResponse, error)
	DeleteTask(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*TaskResponse, error)
	ReadAllLists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Provider_ReadAllListsClient, error)
	ReadAllListIds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListIdResponse, error)
	CreateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ListResponse, error)
	ReadList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ListResponse, error)
	UpdateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ListResponse, error)
	DeleteList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ListResponse, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) GetId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetDescription(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetIconName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetIconName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ReadAllTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Provider_ReadAllTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[0], "/provider.Provider/ReadAllTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerReadAllTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_ReadAllTasksClient interface {
	Recv() (*TaskResponse, error)
	grpc.ClientStream
}

type providerReadAllTasksClient struct {
	grpc.ClientStream
}

func (x *providerReadAllTasksClient) Recv() (*TaskResponse, error) {
	m := new(TaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) ReadTasksFromList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (Provider_ReadTasksFromListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[1], "/provider.Provider/ReadTasksFromList", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerReadTasksFromListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_ReadTasksFromListClient interface {
	Recv() (*TaskResponse, error)
	grpc.ClientStream
}

type providerReadTasksFromListClient struct {
	grpc.ClientStream
}

func (x *providerReadTasksFromListClient) Recv() (*TaskResponse, error) {
	m := new(TaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) ReadTaskIdsFromList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*TaskIdResponse, error) {
	out := new(TaskIdResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/ReadTaskIdsFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ReadTaskCountFromList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/ReadTaskCountFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ReadTask(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/ReadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeleteTask(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ReadAllLists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Provider_ReadAllListsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[2], "/provider.Provider/ReadAllLists", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerReadAllListsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_ReadAllListsClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type providerReadAllListsClient struct {
	grpc.ClientStream
}

func (x *providerReadAllListsClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) ReadAllListIds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListIdResponse, error) {
	out := new(ListIdResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/ReadAllListIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CreateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/CreateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ReadList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/ReadList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpdateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/UpdateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeleteList(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/DeleteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	GetId(context.Context, *Empty) (*wrappers.StringValue, error)
	GetName(context.Context, *Empty) (*wrappers.StringValue, error)
	GetDescription(context.Context, *Empty) (*wrappers.StringValue, error)
	GetIconName(context.Context, *Empty) (*wrappers.StringValue, error)
	ReadAllTasks(*Empty, Provider_ReadAllTasksServer) error
	ReadTasksFromList(*wrappers.StringValue, Provider_ReadTasksFromListServer) error
	ReadTaskIdsFromList(context.Context, *wrappers.StringValue) (*TaskIdResponse, error)
	ReadTaskCountFromList(context.Context, *wrappers.StringValue) (*CountResponse, error)
	CreateTask(context.Context, *Task) (*TaskResponse, error)
	ReadTask(context.Context, *wrappers.StringValue) (*TaskResponse, error)
	UpdateTask(context.Context, *Task) (*TaskResponse, error)
	DeleteTask(context.Context, *wrappers.StringValue) (*TaskResponse, error)
	ReadAllLists(*Empty, Provider_ReadAllListsServer) error
	ReadAllListIds(context.Context, *Empty) (*ListIdResponse, error)
	CreateList(context.Context, *List) (*ListResponse, error)
	ReadList(context.Context, *wrappers.StringValue) (*ListResponse, error)
	UpdateList(context.Context, *List) (*ListResponse, error)
	DeleteList(context.Context, *wrappers.StringValue) (*ListResponse, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) GetId(context.Context, *Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedProviderServer) GetName(context.Context, *Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedProviderServer) GetDescription(context.Context, *Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescription not implemented")
}
func (UnimplementedProviderServer) GetIconName(context.Context, *Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIconName not implemented")
}
func (UnimplementedProviderServer) ReadAllTasks(*Empty, Provider_ReadAllTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAllTasks not implemented")
}
func (UnimplementedProviderServer) ReadTasksFromList(*wrappers.StringValue, Provider_ReadTasksFromListServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTasksFromList not implemented")
}
func (UnimplementedProviderServer) ReadTaskIdsFromList(context.Context, *wrappers.StringValue) (*TaskIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTaskIdsFromList not implemented")
}
func (UnimplementedProviderServer) ReadTaskCountFromList(context.Context, *wrappers.StringValue) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTaskCountFromList not implemented")
}
func (UnimplementedProviderServer) CreateTask(context.Context, *Task) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedProviderServer) ReadTask(context.Context, *wrappers.StringValue) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTask not implemented")
}
func (UnimplementedProviderServer) UpdateTask(context.Context, *Task) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedProviderServer) DeleteTask(context.Context, *wrappers.StringValue) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedProviderServer) ReadAllLists(*Empty, Provider_ReadAllListsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAllLists not implemented")
}
func (UnimplementedProviderServer) ReadAllListIds(context.Context, *Empty) (*ListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllListIds not implemented")
}
func (UnimplementedProviderServer) CreateList(context.Context, *List) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedProviderServer) ReadList(context.Context, *wrappers.StringValue) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadList not implemented")
}
func (UnimplementedProviderServer) UpdateList(context.Context, *List) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedProviderServer) DeleteList(context.Context, *wrappers.StringValue) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetId(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetDescription(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetIconName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetIconName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetIconName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetIconName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ReadAllTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).ReadAllTasks(m, &providerReadAllTasksServer{stream})
}

type Provider_ReadAllTasksServer interface {
	Send(*TaskResponse) error
	grpc.ServerStream
}

type providerReadAllTasksServer struct {
	grpc.ServerStream
}

func (x *providerReadAllTasksServer) Send(m *TaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_ReadTasksFromList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).ReadTasksFromList(m, &providerReadTasksFromListServer{stream})
}

type Provider_ReadTasksFromListServer interface {
	Send(*TaskResponse) error
	grpc.ServerStream
}

type providerReadTasksFromListServer struct {
	grpc.ServerStream
}

func (x *providerReadTasksFromListServer) Send(m *TaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_ReadTaskIdsFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ReadTaskIdsFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/ReadTaskIdsFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ReadTaskIdsFromList(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ReadTaskCountFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ReadTaskCountFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/ReadTaskCountFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ReadTaskCountFromList(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ReadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ReadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/ReadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ReadTask(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeleteTask(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ReadAllLists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).ReadAllLists(m, &providerReadAllListsServer{stream})
}

type Provider_ReadAllListsServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type providerReadAllListsServer struct {
	grpc.ServerStream
}

func (x *providerReadAllListsServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_ReadAllListIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ReadAllListIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/ReadAllListIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ReadAllListIds(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/CreateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CreateList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ReadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ReadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/ReadList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ReadList(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/UpdateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/DeleteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeleteList(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _Provider_GetId_Handler,
		},
		{
			MethodName: "GetName",
			Handler:    _Provider_GetName_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _Provider_GetDescription_Handler,
		},
		{
			MethodName: "GetIconName",
			Handler:    _Provider_GetIconName_Handler,
		},
		{
			MethodName: "ReadTaskIdsFromList",
			Handler:    _Provider_ReadTaskIdsFromList_Handler,
		},
		{
			MethodName: "ReadTaskCountFromList",
			Handler:    _Provider_ReadTaskCountFromList_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Provider_CreateTask_Handler,
		},
		{
			MethodName: "ReadTask",
			Handler:    _Provider_ReadTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Provider_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Provider_DeleteTask_Handler,
		},
		{
			MethodName: "ReadAllListIds",
			Handler:    _Provider_ReadAllListIds_Handler,
		},
		{
			MethodName: "CreateList",
			Handler:    _Provider_CreateList_Handler,
		},
		{
			MethodName: "ReadList",
			Handler:    _Provider_ReadList_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _Provider_UpdateList_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _Provider_DeleteList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAllTasks",
			Handler:       _Provider_ReadAllTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadTasksFromList",
			Handler:       _Provider_ReadTasksFromList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadAllLists",
			Handler:       _Provider_ReadAllLists_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/provider.proto",
}
