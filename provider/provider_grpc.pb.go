// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: proto/provider.proto

package provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	GetTask(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error)
	GetTasks(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Provider_GetTasksClient, error)
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ProviderResponse, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ProviderResponse, error)
	DeleteTask(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error)
	GetList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error)
	GetLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Provider_GetListsClient, error)
	GetListIds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProviderResponse, error)
	CreateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ProviderResponse, error)
	UpdateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ProviderResponse, error)
	DeleteList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error)
	GetTasksFromList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Provider_GetTasksFromListClient, error)
	GetTaskIdsFromList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error)
	GetTaskCountFromList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) GetTask(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetTasks(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Provider_GetTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[0], "/provider.Provider/GetTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerGetTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_GetTasksClient interface {
	Recv() (*ProviderResponse, error)
	grpc.ClientStream
}

type providerGetTasksClient struct {
	grpc.ClientStream
}

func (x *providerGetTasksClient) Recv() (*ProviderResponse, error) {
	m := new(ProviderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeleteTask(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Provider_GetListsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[1], "/provider.Provider/GetLists", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerGetListsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_GetListsClient interface {
	Recv() (*ProviderResponse, error)
	grpc.ClientStream
}

type providerGetListsClient struct {
	grpc.ClientStream
}

func (x *providerGetListsClient) Recv() (*ProviderResponse, error) {
	m := new(ProviderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) GetListIds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetListIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CreateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/CreateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpdateList(ctx context.Context, in *List, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/UpdateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeleteList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/DeleteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetTasksFromList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Provider_GetTasksFromListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[2], "/provider.Provider/GetTasksFromList", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerGetTasksFromListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_GetTasksFromListClient interface {
	Recv() (*ProviderResponse, error)
	grpc.ClientStream
}

type providerGetTasksFromListClient struct {
	grpc.ClientStream
}

func (x *providerGetTasksFromListClient) Recv() (*ProviderResponse, error) {
	m := new(ProviderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) GetTaskIdsFromList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetTaskIdsFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetTaskCountFromList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ProviderResponse, error) {
	out := new(ProviderResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/GetTaskCountFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	GetTask(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error)
	GetTasks(*wrapperspb.StringValue, Provider_GetTasksServer) error
	CreateTask(context.Context, *Task) (*ProviderResponse, error)
	UpdateTask(context.Context, *Task) (*ProviderResponse, error)
	DeleteTask(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error)
	GetList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error)
	GetLists(*emptypb.Empty, Provider_GetListsServer) error
	GetListIds(context.Context, *emptypb.Empty) (*ProviderResponse, error)
	CreateList(context.Context, *List) (*ProviderResponse, error)
	UpdateList(context.Context, *List) (*ProviderResponse, error)
	DeleteList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error)
	GetTasksFromList(*wrapperspb.StringValue, Provider_GetTasksFromListServer) error
	GetTaskIdsFromList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error)
	GetTaskCountFromList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) GetTask(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedProviderServer) GetTasks(*wrapperspb.StringValue, Provider_GetTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedProviderServer) CreateTask(context.Context, *Task) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedProviderServer) UpdateTask(context.Context, *Task) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedProviderServer) DeleteTask(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedProviderServer) GetList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedProviderServer) GetLists(*emptypb.Empty, Provider_GetListsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLists not implemented")
}
func (UnimplementedProviderServer) GetListIds(context.Context, *emptypb.Empty) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListIds not implemented")
}
func (UnimplementedProviderServer) CreateList(context.Context, *List) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedProviderServer) UpdateList(context.Context, *List) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedProviderServer) DeleteList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedProviderServer) GetTasksFromList(*wrapperspb.StringValue, Provider_GetTasksFromListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTasksFromList not implemented")
}
func (UnimplementedProviderServer) GetTaskIdsFromList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskIdsFromList not implemented")
}
func (UnimplementedProviderServer) GetTaskCountFromList(context.Context, *wrapperspb.StringValue) (*ProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskCountFromList not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetTask(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).GetTasks(m, &providerGetTasksServer{stream})
}

type Provider_GetTasksServer interface {
	Send(*ProviderResponse) error
	grpc.ServerStream
}

type providerGetTasksServer struct {
	grpc.ServerStream
}

func (x *providerGetTasksServer) Send(m *ProviderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeleteTask(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetList(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetLists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).GetLists(m, &providerGetListsServer{stream})
}

type Provider_GetListsServer interface {
	Send(*ProviderResponse) error
	grpc.ServerStream
}

type providerGetListsServer struct {
	grpc.ServerStream
}

func (x *providerGetListsServer) Send(m *ProviderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_GetListIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetListIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetListIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetListIds(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/CreateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CreateList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/UpdateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/DeleteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeleteList(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetTasksFromList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).GetTasksFromList(m, &providerGetTasksFromListServer{stream})
}

type Provider_GetTasksFromListServer interface {
	Send(*ProviderResponse) error
	grpc.ServerStream
}

type providerGetTasksFromListServer struct {
	grpc.ServerStream
}

func (x *providerGetTasksFromListServer) Send(m *ProviderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_GetTaskIdsFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetTaskIdsFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetTaskIdsFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetTaskIdsFromList(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetTaskCountFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetTaskCountFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/GetTaskCountFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetTaskCountFromList(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _Provider_GetTask_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Provider_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Provider_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Provider_DeleteTask_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _Provider_GetList_Handler,
		},
		{
			MethodName: "GetListIds",
			Handler:    _Provider_GetListIds_Handler,
		},
		{
			MethodName: "CreateList",
			Handler:    _Provider_CreateList_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _Provider_UpdateList_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _Provider_DeleteList_Handler,
		},
		{
			MethodName: "GetTaskIdsFromList",
			Handler:    _Provider_GetTaskIdsFromList_Handler,
		},
		{
			MethodName: "GetTaskCountFromList",
			Handler:    _Provider_GetTaskCountFromList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTasks",
			Handler:       _Provider_GetTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLists",
			Handler:       _Provider_GetLists_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTasksFromList",
			Handler:       _Provider_GetTasksFromList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/provider.proto",
}
